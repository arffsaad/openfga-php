<?php
/**
 * Metadata
 *
 * @category Class
 * @package  RuncloudIO\SDK\OPENFGA
 * @author   Runcloud Engineering Team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * OpenAPI spec version: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RuncloudIO\SDK\OPENFGA\Model;

use \RuncloudIO\SDK\OPENFGA\ObjectSerializer;

/**
 * Metadata Class Doc Comment
 *
 * Required Attributes:
 *
 * @category Class
 * @package  RuncloudIO\SDK\OPENFGA
 * @author   Runcloud Engineering Team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 *
 * @method map[string,\RuncloudIO\SDK\OPENFGA\Model\RelationMetadata] getRelations()
 * @method $this setRelations($relations)
 * @method string getModule()
 * @method $this setModule($module)
 * @method \RuncloudIO\SDK\OPENFGA\Model\SourceInfo getSourceInfo()
 * @method $this setSourceInfo($source_info)
 *
 */
class Metadata implements ModelInterface
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'relations' => 'map[string,\RuncloudIO\SDK\OPENFGA\Model\RelationMetadata]',
        'module' => 'string',
        'source_info' => '\RuncloudIO\SDK\OPENFGA\Model\SourceInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'relations' => null,
        'module' => null,
        'source_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'relations' => 'relations',
        'module' => 'module',
        'source_info' => 'source_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'relations' => 'setRelations',
        'module' => 'setModule',
        'source_info' => 'setSourceInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'relations' => 'getRelations',
        'module' => 'getModule',
        'source_info' => 'getSourceInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param map[string,\RuncloudIO\SDK\OPENFGA\Model\RelationMetadata] $relations relations 
     * @param string $module module 
     * @param \RuncloudIO\SDK\OPENFGA\Model\SourceInfo $source_info source_info 
     *   Associated array of property values initializing the model
     */
    public function __construct(map[string,\RuncloudIO\SDK\OPENFGA\Model\RelationMetadata] $relations = null, string $module = null, \RuncloudIO\SDK\OPENFGA\Model\SourceInfo $source_info = null)
    {
        if(!is_null($relations)) {
            $this->container['relations'] = $relations;
        }
        if(!is_null($module)) {
            $this->container['module'] = $module;
        }
        if(!is_null($source_info)) {
            $this->container['source_info'] = $source_info;
        }
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets relations
     *
     * @return map[string,\RuncloudIO\SDK\OPENFGA\Model\RelationMetadata]
     */
    public function getRelations()
    {
        return $this->container['relations'];
    }

    /**
     * Sets relations
     *
     * @param map[string,\RuncloudIO\SDK\OPENFGA\Model\RelationMetadata] $relations relations
     *
     * @return $this
     */
    public function setRelations($relations)
    {
        $this->container['relations'] = $relations;

        return $this;
    }

    /**
     * Gets module
     *
     * @return string
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param string $module module
     *
     * @return $this
     */
    public function setModule($module)
    {
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets source_info
     *
     * @return \RuncloudIO\SDK\OPENFGA\Model\SourceInfo
     */
    public function getSourceInfo()
    {
        return $this->container['source_info'];
    }

    /**
     * Sets source_info
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\SourceInfo $source_info source_info
     *
     * @return $this
     */
    public function setSourceInfo($source_info)
    {
        $this->container['source_info'] = $source_info;

        return $this;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
