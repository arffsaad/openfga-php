<?php
/**
 * StoreIdReadBody
 *
 * @category Class
 * @package  RuncloudIO\SDK\OPENFGA
 * @author   Runcloud Engineering Team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * OpenAPI spec version: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RuncloudIO\SDK\OPENFGA\Model;

use \RuncloudIO\SDK\OPENFGA\ObjectSerializer;

/**
 * StoreIdReadBody Class Doc Comment
 *
 * Required Attributes:
 *
 * @category Class
 * @package  RuncloudIO\SDK\OPENFGA
 * @author   Runcloud Engineering Team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 *
 * @method \RuncloudIO\SDK\OPENFGA\Model\ReadRequestTupleKey getTupleKey()
 * @method $this setTupleKey($tuple_key)
 * @method int getPageSize()
 * @method $this setPageSize($page_size)
 * @method string getContinuationToken()
 * @method $this setContinuationToken($continuation_token)
 * @method \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference getConsistency()
 * @method $this setConsistency($consistency)
 *
 */
class StoreIdReadBody implements ModelInterface
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'store_id_read_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tuple_key' => '\RuncloudIO\SDK\OPENFGA\Model\ReadRequestTupleKey',
        'page_size' => 'int',
        'continuation_token' => 'string',
        'consistency' => '\RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tuple_key' => null,
        'page_size' => 'int32',
        'continuation_token' => null,
        'consistency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tuple_key' => 'tuple_key',
        'page_size' => 'page_size',
        'continuation_token' => 'continuation_token',
        'consistency' => 'consistency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tuple_key' => 'setTupleKey',
        'page_size' => 'setPageSize',
        'continuation_token' => 'setContinuationToken',
        'consistency' => 'setConsistency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tuple_key' => 'getTupleKey',
        'page_size' => 'getPageSize',
        'continuation_token' => 'getContinuationToken',
        'consistency' => 'getConsistency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\ReadRequestTupleKey $tuple_key tuple_key 
     * @param int $page_size page_size 
     * @param string $continuation_token continuation_token 
     * @param \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference $consistency consistency 
     *   Associated array of property values initializing the model
     */
    public function __construct(\RuncloudIO\SDK\OPENFGA\Model\ReadRequestTupleKey $tuple_key = null, int $page_size = null, string $continuation_token = null, \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference $consistency = null)
    {
        if(!is_null($tuple_key)) {
            $this->container['tuple_key'] = $tuple_key;
        }
        if(!is_null($page_size)) {
            $this->container['page_size'] = $page_size;
        }
        if(!is_null($continuation_token)) {
            $this->container['continuation_token'] = $continuation_token;
        }
        if(!is_null($consistency)) {
            $this->container['consistency'] = $consistency;
        }
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tuple_key
     *
     * @return \RuncloudIO\SDK\OPENFGA\Model\ReadRequestTupleKey
     */
    public function getTupleKey()
    {
        return $this->container['tuple_key'];
    }

    /**
     * Sets tuple_key
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\ReadRequestTupleKey $tuple_key tuple_key
     *
     * @return $this
     */
    public function setTupleKey($tuple_key)
    {
        $this->container['tuple_key'] = $tuple_key;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets continuation_token
     *
     * @return string
     */
    public function getContinuationToken()
    {
        return $this->container['continuation_token'];
    }

    /**
     * Sets continuation_token
     *
     * @param string $continuation_token continuation_token
     *
     * @return $this
     */
    public function setContinuationToken($continuation_token)
    {
        $this->container['continuation_token'] = $continuation_token;

        return $this;
    }

    /**
     * Gets consistency
     *
     * @return \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference
     */
    public function getConsistency()
    {
        return $this->container['consistency'];
    }

    /**
     * Sets consistency
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference $consistency consistency
     *
     * @return $this
     */
    public function setConsistency($consistency)
    {
        $this->container['consistency'] = $consistency;

        return $this;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
