<?php
/**
 * StoreIdListusersBody
 *
 * @category Class
 * @package  RuncloudIO\SDK\OPENFGA
 * @author   Runcloud Engineering Team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * OpenAPI spec version: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RuncloudIO\SDK\OPENFGA\Model;

use \RuncloudIO\SDK\OPENFGA\ObjectSerializer;

/**
 * StoreIdListusersBody Class Doc Comment
 *
 * Required Attributes:
 * - object
 * - relation
 * - user_filters
 *
 * @category Class
 * @package  RuncloudIO\SDK\OPENFGA
 * @author   Runcloud Engineering Team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 *
 * @method string getAuthorizationModelId()
 * @method $this setAuthorizationModelId($authorization_model_id)
 * @method \RuncloudIO\SDK\OPENFGA\Model\Object getObject()
 * @method $this setObject($object)
 * @method string getRelation()
 * @method $this setRelation($relation)
 * @method \RuncloudIO\SDK\OPENFGA\Model\UserTypeFilter[] getUserFilters()
 * @method $this setUserFilters($user_filters)
 * @method \RuncloudIO\SDK\OPENFGA\Model\TupleKey[] getContextualTuples()
 * @method $this setContextualTuples($contextual_tuples)
 * @method object getContext()
 * @method $this setContext($context)
 * @method \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference getConsistency()
 * @method $this setConsistency($consistency)
 *
 */
class StoreIdListusersBody implements ModelInterface
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'store_id_listusers_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorization_model_id' => 'string',
        'object' => '\RuncloudIO\SDK\OPENFGA\Model\Object',
        'relation' => 'string',
        'user_filters' => '\RuncloudIO\SDK\OPENFGA\Model\UserTypeFilter[]',
        'contextual_tuples' => '\RuncloudIO\SDK\OPENFGA\Model\TupleKey[]',
        'context' => 'object',
        'consistency' => '\RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorization_model_id' => null,
        'object' => null,
        'relation' => null,
        'user_filters' => null,
        'contextual_tuples' => null,
        'context' => null,
        'consistency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_model_id' => 'authorization_model_id',
        'object' => 'object',
        'relation' => 'relation',
        'user_filters' => 'user_filters',
        'contextual_tuples' => 'contextual_tuples',
        'context' => 'context',
        'consistency' => 'consistency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_model_id' => 'setAuthorizationModelId',
        'object' => 'setObject',
        'relation' => 'setRelation',
        'user_filters' => 'setUserFilters',
        'contextual_tuples' => 'setContextualTuples',
        'context' => 'setContext',
        'consistency' => 'setConsistency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_model_id' => 'getAuthorizationModelId',
        'object' => 'getObject',
        'relation' => 'getRelation',
        'user_filters' => 'getUserFilters',
        'contextual_tuples' => 'getContextualTuples',
        'context' => 'getContext',
        'consistency' => 'getConsistency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param string $authorization_model_id authorization_model_id 
     * @param \RuncloudIO\SDK\OPENFGA\Model\Object $object object 
     * @param string $relation relation 
     * @param \RuncloudIO\SDK\OPENFGA\Model\UserTypeFilter[] $user_filters user_filters 
     * @param \RuncloudIO\SDK\OPENFGA\Model\TupleKey[] $contextual_tuples contextual_tuples 
     * @param object $context context 
     * @param \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference $consistency consistency 
     *   Associated array of property values initializing the model
     */
    public function __construct(string $authorization_model_id = null, \RuncloudIO\SDK\OPENFGA\Model\Object $object = null, string $relation = null, array $user_filters = null, array $contextual_tuples = null, object $context = null, \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference $consistency = null)
    {
        if(!is_null($authorization_model_id)) {
            $this->container['authorization_model_id'] = $authorization_model_id;
        }
        if(!is_null($object)) {
            $this->container['object'] = $object;
        }
        if(!is_null($relation)) {
            $this->container['relation'] = $relation;
        }
        if(!is_null($user_filters)) {
            $this->container['user_filters'] = $user_filters;
        }
        if(!is_null($contextual_tuples)) {
            $this->container['contextual_tuples'] = $contextual_tuples;
        }
        if(!is_null($context)) {
            $this->container['context'] = $context;
        }
        if(!is_null($consistency)) {
            $this->container['consistency'] = $consistency;
        }
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        if ($this->container['relation'] === null) {
            $invalidProperties[] = "'relation' can't be null";
        }
        if ($this->container['user_filters'] === null) {
            $invalidProperties[] = "'user_filters' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_model_id
     *
     * @return string
     */
    public function getAuthorizationModelId()
    {
        return $this->container['authorization_model_id'];
    }

    /**
     * Sets authorization_model_id
     *
     * @param string $authorization_model_id authorization_model_id
     *
     * @return $this
     */
    public function setAuthorizationModelId($authorization_model_id)
    {
        $this->container['authorization_model_id'] = $authorization_model_id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return \RuncloudIO\SDK\OPENFGA\Model\Object
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\Object $object object
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets relation
     *
     * @return string
     */
    public function getRelation()
    {
        return $this->container['relation'];
    }

    /**
     * Sets relation
     *
     * @param string $relation relation
     *
     * @return $this
     */
    public function setRelation($relation)
    {
        $this->container['relation'] = $relation;

        return $this;
    }

    /**
     * Gets user_filters
     *
     * @return \RuncloudIO\SDK\OPENFGA\Model\UserTypeFilter[]
     */
    public function getUserFilters()
    {
        return $this->container['user_filters'];
    }

    /**
     * Sets user_filters
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\UserTypeFilter[] $user_filters The type of results returned. Only accepts exactly one value.
     *
     * @return $this
     */
    public function setUserFilters($user_filters)
    {
        $this->container['user_filters'] = $user_filters;

        return $this;
    }

    /**
     * Gets contextual_tuples
     *
     * @return \RuncloudIO\SDK\OPENFGA\Model\TupleKey[]
     */
    public function getContextualTuples()
    {
        return $this->container['contextual_tuples'];
    }

    /**
     * Sets contextual_tuples
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\TupleKey[] $contextual_tuples contextual_tuples
     *
     * @return $this
     */
    public function setContextualTuples($contextual_tuples)
    {
        $this->container['contextual_tuples'] = $contextual_tuples;

        return $this;
    }

    /**
     * Gets context
     *
     * @return object
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param object $context Additional request context that will be used to evaluate any ABAC conditions encountered in the query evaluation.
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets consistency
     *
     * @return \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference
     */
    public function getConsistency()
    {
        return $this->container['consistency'];
    }

    /**
     * Sets consistency
     *
     * @param \RuncloudIO\SDK\OPENFGA\Model\ConsistencyPreference $consistency consistency
     *
     * @return $this
     */
    public function setConsistency($consistency)
    {
        $this->container['consistency'] = $consistency;

        return $this;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public function toJson()
    {
        return json_encode($this->container);
    }
}
